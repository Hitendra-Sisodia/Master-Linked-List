class Solution {
public:
    ListNode *merge(ListNode *head1, ListNode *head2) {
        if(head1 == NULL) return head2;
        if(head2 == NULL) return head1;

        // create dummy node
        ListNode *dummy = new ListNode(-1);
        ListNode *prev = dummy;
        while(head1 != NULL && head2 != NULL) {
            if(head1 -> val <= head2 -> val) {
                prev -> next = head1;
                prev = head1;
                head1 = head1 -> next;
            }
            else{
                prev -> next = head2;
                prev = head2;
                head2 = head2 -> next;
            }
        }
        while(head1 != NULL){
            prev -> next = head1;
            prev = head1;
            head1 = head1 -> next;
        }
        while(head2 != NULL){
            prev -> next = head2;
            prev = head2;
            head2 = head2 -> next;
        }
        return dummy -> next;
    }
    ListNode *sortLinkedList(ListNode *head) {
        if(head == NULL || head -> next == NULL){
            return head;
        }
        ListNode *prev = NULL;
        ListNode *slow = head;
        ListNode *fast = head;
        while(fast != NULL && fast -> next != NULL) {
            prev = slow;                                // reaches (mid - 1)th pos end of first LL
            slow = slow -> next;                        // reaches (mid)th pos i.e, start of second LL
            fast  = fast -> next -> next;               // reaches to end of 2nd LL
        }
        prev -> next = NULL;
        
        // recursive call to left side untill reaches to single node
        ListNode *head1 = sortLinkedList(head); 
        ListNode *head2 = sortLinkedList(slow);

        return merge(head1,head2);
    }
    ListNode* sortList(ListNode* head) {
        return sortLinkedList(head);
    }
};
