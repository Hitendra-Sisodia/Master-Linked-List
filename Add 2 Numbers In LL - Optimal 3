class Solution
{
    public:
    Node *reverse(Node *head){
        Node *prev = NULL;
        Node *current = head;
        Node *next = NULL;
        while(current != NULL){
            next = current -> next;
            current -> next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
    struct Node *sumOfTwoNumbers(struct Node *head1 , struct Node *head2) {
        // Optimal Appraoch 2 TC = O(M+N) SC = O(max(M,N))
        Node *temp1 = reverse(head1);
        Node *temp2 = reverse(head2);
        
        int carry = 0;
        
        Node *prev = NULL;
        while(temp1 != NULL || temp2 != NULL || carry != 0){
            int val = carry;
            if(temp1 != NULL) val = val + temp1 -> data;
            if(temp2 != NULL) val = val + temp2 -> data;
            
            Node *newNode = new Node(val % 10);
            newNode -> next = prev;
            prev = newNode;
            carry = val / 10;
            
            if(temp1 != NULL)  temp1 = temp1 -> next;
            if(temp2 != NULL) temp2 = temp2 -> next;
        }
        return prev;
    }
    struct Node* addTwoLists(struct Node* first, struct Node* second) {
        return sumOfTwoNumbers(first,second);
    }
};
