Node *reverse(Node *head) {
    Node *prev = NULL;
    Node *current = head;
    Node *next = NULL;
    while(current != NULL) {
        next = current -> next;
        current -> next = prev;
        prev = current;
        current = next;
    }
    return prev;
}

Node *mergeTwoSortednextedList(Node *head1 , Node *head2) {
    if(head1 == NULL) return head2;
    if(head2 == NULL) return head1;
    Node *dummy = new Node(-1);
    Node *prev = dummy;
    while(head1 != NULL && head2 != NULL) {
        if(head1 -> data <= head2 -> data) {
            prev -> next = head1;
            prev = head1;
            head1 = head1 -> next;
        }
        else{
            prev -> next = head2;
            prev = head2;
            head2 = head2 -> next;
        }
    }
    while(head1 != NULL){
        prev -> next = head1;
        prev = head1;
        head1 = head1 -> next;
    }
    while(head2 != NULL) {
        prev -> next = head2;
        prev = head2;
        head2 = head2 -> next;
    }
    return dummy -> next;
}

void sortAlternate(Node **head) {
    Node *head1 = *head;
    Node *head1Itr = *head;
    Node *head2 = (*head) -> next;
    Node *head2Itr = (*head) -> next;
    while(head2Itr != NULL && head2Itr -> next != NULL) {
        head1Itr -> next = head1Itr -> next -> next;
        head2Itr -> next = head2Itr -> next -> next;
        head1Itr = head1Itr -> next;
        head2Itr = head2Itr -> next;
    }
    head1Itr -> next = NULL;
    *head = mergeTwoSortednextedList(head1,reverse(head2));
}
void sort(Node **head)
{
     sortAlternate(head);
}
