// doubly linked list
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

class Node {
    public:
    int data;
    Node *prev;
    Node *link;

    Node(int data){
        this -> data = data;
        this -> prev = NULL;
        this -> link = NULL;
    }
};

void print(Node *head){
    Node *temp = head;
    while(temp != NULL){
        cout<<temp -> data<<" ";
        temp = temp -> link;
    }
    cout<<endl;
}

void insertAtHead(Node * &head,int data){
    // Null node
    if(head == NULL){
        Node *newNode = new Node(data);
        head = newNode;
        return ;
    }
    Node *newNode = new Node(data);
    newNode -> link = head;
    head = newNode;
}

void insertAtTail(Node * &head, int data){
    // Null node
    if(head == NULL){
        Node *newNode = new Node(data);
        head = newNode;
        newNode -> prev = head;
        return ;
    }
    Node *newNode = new Node(data);
    Node *temp = head;
    Node *prevNode = NULL;
    while(temp != NULL){
        prevNode = temp;
        temp = temp -> link;
    }
    newNode -> prev = prevNode;
    prevNode -> link = newNode;
}

void insertAtPos(Node * &head, int pos,int data) {
    // insert at pos 1
    if(pos == 1){
        insertAtHead(head,data);
        return ;
    }
    int nodeCount = 0;
    Node *nodeTemp = head;
    while(nodeTemp != NULL){
        nodeCount++;
        nodeTemp = nodeTemp -> link;
    }
    if(nodeCount == pos - 1){
        insertAtTail(head,data);
        return ;
    }
    Node *newNode = new Node(data);
    Node *temp = head;
    for(int i = 1 ; i < pos - 1; i++){
        temp = temp -> link;
    }
    newNode -> link = temp -> link;
    newNode -> link -> prev = newNode;
    temp -> link = newNode;
    newNode -> prev = temp;
}


int main()
{
    Node *head = NULL;
    insertAtHead(head,20);
    print(head);
    insertAtHead(head,10);
    print(head);
    insertAtTail(head,30);
    print(head);
    insertAtPos(head,4,15);
    print(head);
}
