class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode* prev = NULL;
        ListNode *current = head;
        ListNode *next = NULL;
        while(current != NULL){
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
    int twinSum(ListNode *head) {
        ListNode *slow = head;
        ListNode *fast = head -> next;
        while(fast != NULL && fast -> next != NULL) {
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        slow -> next = reverse(slow -> next);

        int maxSum = INT_MIN;
        ListNode *temp1 = head;
        ListNode *temp2 = slow -> next;
        while(temp2 != NULL){
            maxSum = max(maxSum,temp1 -> val + temp2 -> val);
            temp1 = temp1 -> next;
            temp2 = temp2 -> next;
        }
        return maxSum;
    }
    int pairSum(ListNode* head) {
        return twinSum(head);
    }
};
